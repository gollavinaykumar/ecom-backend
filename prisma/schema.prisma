generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String?   @unique
  password  String
  phone     String?   @unique
  profile   Profile?
  addresses Address[]
  orders    Order[]
  role      Role      @default(USER)
  ratings   Rating[]
  likes     Like[]
  comments  Comment[]
  cart      Cart?
  createdAt DateTime  @default(now())
}

model Profile {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  bio       String?
  avatarUrl String?
}

model Address {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  line1     String
  line2     String?
  city      String
  state     String
  country   String
  pincode   String
  isDefault Boolean @default(false)
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  OfferPrice  Float?
  stock       Int
  imageUrl    String?
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  ratings     Rating[]
  likes       Like[]
  comments    Comment[]
  orderItems  OrderItem[]
  CartItem    CartItem[]
  createdAt   DateTime    @default(now())
}

model Category {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
  total     Float
  status    OrderStatus @default(PENDING)
  address   String
  items     OrderItem[]
  Payment   Payment[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Rating {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Like {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  content   String
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Payment {
  id                Int           @id @default(autoincrement())
  orderId           String
  razorpayOrderId   String        @unique
  razorpayPaymentId String?       @unique
  amount            Float
  currency          String        @default("INR")
  method            PaymentMethod
  status            PaymentStatus @default(CREATED)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  order             Order         @relation(fields: [orderId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum PaymentStatus {
  CREATED
  ATTEMPTED
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  NETBANKING
  WALLET
  UPI
  EMI
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  RETURN_REQUESTED
  RETURNED
  REFUNDED
}
